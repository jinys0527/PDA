단계 별 미션. 첫 단계,
실행 파일과 리소스만 올릴 것.
코드는 깃헙에 올릴 것

** 진행 상황과 에로 사항 메모장에 적어서 함께 SVN 에 올릴 것

1. 게임 루프 구조를 잡아 봅시다.

- 루프 진입 전 : 로드, 초기화
Loop::
Time
Input
Update - 로직 업데이트
Render - 그림을 그립니다.
** 윈도우 메시지 Peek 부분 체크
- 루프 끝나고 더이상 사용하지 않는 리소스 정리. 메모리 릭 체크를 해봅니다.

2. 씬 - 씬 매니저
씬에서 게임 월드 관리
씬에서 게임 객체 관리
씬에서 필요한 리소스를 로드하거나 모든 씬에 필요한 리소스를 미리 PreUpdate 단에서 가져올 수 있음

3. 랜더러 

GDI 과 다른 점 체크!
구조 짜기 어려우면 싱글턴으로 D2D 랜더러 호출해도 무방합니다.
랜더 큐에 그릴 정보를 넣고 지연 랜더링을 하면 좋으나 구조가 어려울 수 있음. 
-> ImGUI 구조를 보면 아이디어가 생길 겁니다만 2학기니니 무리하지 않아도 됩니다.


3. 리소스 관리
* 리소스(에셋) 매니저 필수
* 비트맵과 애니메이션 리소스 관리는 따로 클래스로 분리할 것
* 이건 컴포넌트 아님!!! 싱글턴으로 하는 것이 편할 수 있으나 취향대로 하세요.

4. 애니메이션
프레임 기반으로 델타를 누적해서 프레임 인덱스를 바꾼다.
* png 리소스를 하나하나 프레임 별로 로드X
* json 으로 메타 정보를 읽어서 구조화된 처리를 해봄
* 컴포넌트로 만들어서 게임 오브젝트에 등록 -> 예시 코드와 유니티 구조 참고


5. 월드 공간에서 오브젝트의 위치와 이동
* 트랜스폼 컴포넌트를 게임 오브젝트에 등록. 
* 게임 오브젝트 상속 받아서 트랜스폼 컴포넌트 디폴트로 가지는 클래스 만들어도 좋음.
* 유니티 처럼 모든 오브젝트가 트랜스폼을 가지고 할 수도 있고
* UI 는 별도로 처리하고 싶은 경우는 분리해도 무방. 이것도 본인 취향

6. 입력 처리
* FSM 으로 이벤트를 발생 시켜서 이동하게 할 수 있음
* 입력 처리는 FSM 으로 하면 복잡한 경우, 안해도 됨.
* 아직, AI 관련해서는 기획도 없고 하니 일단, 안해요. 이건 시간 봐서.

<< 미션 >>

다이노 점프. ( 꼭 다이노가 아니어도 됨. )

위에 배운 내용을 활용해서 카메라가 다이노(플레이어)를 따라다니게 하고
점프로 아이템을 먹으면 됩니다. (Box 콜라이어와 AABB 체크하면 됨)
